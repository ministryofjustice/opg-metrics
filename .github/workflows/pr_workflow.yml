name: "[Workflow] PR"

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  security-events: write
  pull-requests: read
  actions: none
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none

jobs:
  test_ship_to_opg_metrics:
    name: Test ship-to-opg-metrics Lambda
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: ship-to-opg-metrics

  test_clsf_to_sqs:
    name: Test clsf-to-sqs Lambda
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: clsf-to-sqs

  build:
    name: Build, Scan and Push Lambdas
    runs-on: ubuntu-latest
    needs: [
      'test_ship_to_opg_metrics',
      'test_clsf_to_sqs',
    ]
    strategy:
      matrix:
        lambdas:
          [
            ship-to-opg-metrics,
            clsf-to-sqs,
          ]

    steps:
      - name: Check out code
        id: checkout_code
        uses: actions/checkout@v3.0.2

      - name: Build Container
        id: build_container
        run: |
          docker build --file lambda/${{ matrix.lambdas }}/Dockerfile --tag ${{ matrix.lambdas }}:latest .

      - name: Trivy Image Vulnerability Scanner
        id: trivy_scan
        uses: aquasecurity/trivy-action@0.3.0
        with:
          image-ref: ${{ matrix.lambdas }}:latest
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 0.0.0
          DEFAULT_BUMP: minor
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/opg-metrics-ci
          role-duration-seconds: 900
          role-session-name: OPGMetricsECRGithubAction
      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1.4.0
        with:
          registries: 311462405659
      - name: Push Container
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          MAINTENANCE_ECR_REPOSITORY: opg-metrics/${{ matrix.lambdas }}
        run: |
          docker tag ${{ matrix.lambdas }}:latest $ECR_REGISTRY/$MAINTENANCE_ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            docker tag ${{ matrix.lambdas }}:latest $ECR_REGISTRY/$MAINTENANCE_ECR_REPOSITORY:main-${{ steps.bump_version.outputs.tag }}
            docker tag ${{ matrix.lambdas }}:latest $ECR_REGISTRY/$MAINTENANCE_ECR_REPOSITORY:latest
          fi
            docker push --all-tags $ECR_REGISTRY/$MAINTENANCE_ECR_REPOSITORY

  tfsec:
    name: TFSec Static analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_path: [
          'terraform/account',
          'terraform/environment',
        ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: tfsec with pr comments
        uses: tfsec/tfsec-pr-commenter-action@v1.2.0
        with:
          working_directory: ${{ matrix.terraform_path }}
          github_token: ${{secrets.GITHUB_TOKEN}}
      - name: Run tfsec
        uses: tfsec/tfsec-sarif-action@v0.1.3
        with:
          sarif_file: tfsec.sarif
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif

  terraform_plan_workflow:
    name: "Terraform Account Plan"
    runs-on: ubuntu-latest
    needs: ['tfsec']
    outputs:
      tag: ${{ steps.bump_version.outputs.tag }}
    strategy:
      matrix:
        terraform_path: [
          'terraform/account',
          'terraform/environment',
        ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGMetricsECRGithubAction

      - name: Lint Terraform
        id: tf_lint
        run: terraform fmt -check -recursive
        working-directory: ./${{ matrix.terraform_path }}
        continue-on-error: true

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./${{ matrix.terraform_path }}

      - name: Terraform Plan
        env:
          TF_WORKSPACE: development
        run: |
          terraform workspace show
          terraform plan -input=false -parallelism=30
        working-directory: ./${{ matrix.terraform_path }}
