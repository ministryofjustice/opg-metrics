name: "[Workflow] Path To Live"

on:
  push:
    branches:
      - main

permissions:
  contents: write
  security-events: write
  pull-requests: read
  actions: none
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none

jobs:
  test_ship_to_opg_metrics:
    name: Test ship-to-opg-metrics Lambda
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: ship-to-opg-metrics

  test_clsf_to_sqs:
    name: Test clsf-to-sqs Lambda
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: clsf-to-sqs

  docker_build_scan_push_ship_to_opg_metrics:
    name: Build, Scan and Push ship-to-opg-metrics
    needs: [
      'test_ship_to_opg_metrics',
      'test_clsf_to_sqs',
    ]
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: ship-to-opg-metrics
    secrets: inherit

  docker_build_scan_push_clsf_to_sqs:
    name: Build, Scan and Push clsf-to-sqs
    needs: [
      'test_ship_to_opg_metrics',
      'test_clsf_to_sqs',
    ]
    uses: ./.github/workflows/python_build_test_job.yml
    with:
      lambda_name: clsf-to-sqs
    secrets: inherit

  tfsec_account:
    name: TFSec Static analysis account
    uses: ./.github/workflows/tfsec_job.yml
    with:
      terraform_path: 'terraform/account'
    secrets: inherit

  tfsec_environment:
    name: TFSec Static analysis environment
    uses: ./.github/workflows/tfsec_job.yml
    with:
      terraform_path: 'terraform/environment'
    secrets: inherit

  terraform_plan_workflow_account:
    name: Terraform Account Plan
    needs: [
      'tfsec_account',
      'tfsec_environment'
    ]
    uses: ./.github/workflows/terraform_account_job.yml
    with:
      terraform_path: 'terraform/account'
    secrets: inherit

  terraform_plan_workflow_environment:
    name: Terraform Environment Plan
    needs: [
      'tfsec_account',
      'tfsec_environment'
    ]
    uses: ./.github/workflows/terraform_account_job.yml
    with:
      terraform_path: 'terraform/environment'
    secrets: inherit

  terraform_apply_workflow:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: ['terraform_plan_workflow']
    outputs:
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGMetricsECRGithubAction

      - name: Terraform Init Account
        run: terraform init -input=false
        working-directory: ./terraform/account

      - name: Terraform Apply Account
        env:
          TF_WORKSPACE: development
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: ./terraform/account

      - name: Terraform Init Environment
        run: terraform init -input=false
        working-directory: ./terraform/environment

      - name: Terraform Apply Environment
        env:
          TF_WORKSPACE: development
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: ./terraform/environment
