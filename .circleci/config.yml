version: 2.1

workflows:
  rotate_api_keys:
    triggers:
      - schedule:
          cron: "0 3 * * *" # Every 3am
          filters:
            branches:
              only:
                - main
    jobs:
      - opg-metrics/rotate_api_keys:
          name: taint api keys
          workspace: development
          configuration_path: environment

      - opg-metrics/terraform_command:
            name: replace api keys
            workspace: development
            configuration_path: environment
            terraform_command: apply
            requires: [taint api keys]

  pr_build:
      jobs:
        - cancel_redundant_builds:
            name: cancel previous jobs
            filters: { branches: { ignore: [main] } }

        - opg-metrics/test_lambda:
            name: test ship-to-opg-metrics lambda
            lambda_name: ship-to-opg-metrics
            filters: { branches: { ignore: [main] } }

        - opg-metrics/test_lambda:
            name: test clsf-to-sqs lambda
            lambda_name: clsf-to-sqs
            filters: { branches: { ignore: [main] } }

        - opg-metrics/docker_build_lambda_image:
            name: build ship-to-opg-metrics lambda image
            lambda_name: ship-to-opg-metrics
            filters: { branches: { ignore: [main] } }
            requires: [cancel previous jobs]

        - opg-metrics/docker_build_lambda_image:
            name: build clsf-to-sqs lambda image
            lambda_name: clsf-to-sqs
            filters: { branches: { ignore: [main] } }
            requires: [cancel previous jobs]

        - opg-metrics/terraform_command:
            name: lint shared terraform
            workspace: development
            configuration_path: account
            terraform_command: validate
            filters: { branches: { ignore: [main] } }
            requires: [cancel previous jobs]

        - opg-metrics/terraform_command:
            name: lint service terraform
            workspace: development
            configuration_path: environment
            terraform_command: validate
            filters: { branches: { ignore: [main] } }
            requires: [cancel previous jobs]

        - opg-metrics/terraform_command:
            name: plan shared terraform
            workspace: development
            configuration_path: account
            terraform_command: plan
            filters: { branches: { ignore: [main] } }
            requires: [
              lint shared terraform,
              ]

        - opg-metrics/terraform_command:
            name: plan service terraform
            workspace: development
            configuration_path: environment
            terraform_command: plan
            filters: { branches: { ignore: [main] } }
            requires: [
              lint service terraform,
              ]

  path_to_live:
      jobs:
        - opg-metrics/docker_build_lambda_image:
            name: build ship-to-opg-metrics lambda image
            lambda_name: ship-to-opg-metrics
            filters: { branches: { only: [main] } }

        - opg-metrics/docker_build_lambda_image:
            name: build clsf-to-sqs lambda image
            lambda_name: clsf-to-sqs
            filters: { branches: { only: [main] } }

        - opg-metrics/terraform_command:
            name: apply shared terraform
            workspace: development
            configuration_path: account
            terraform_command: apply
            filters: { branches: { only: [main] } }

        - opg-metrics/terraform_command:
              name: apply service terraform
              workspace: development
              configuration_path: environment
              terraform_command: apply
              filters: { branches: { only: [main] } }
              requires: [
                apply shared terraform,
                ]


orbs:
  slack: circleci/slack@3.3.0
  opg-metrics:
    executors:
      terraform:
        docker: [image: hashicorp/terraform:1.0.10]
        resource_class: small
      python:
        docker: [image: cimg/python:3.8]
        resource_class: small
    commands:
      install_pytest:
        steps:
          - run:
              name: Install pytest
              command: pip install pytest mock
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: pip install awscli --upgrade
      ecr_login_lambda:
        parameters:
          ecr:
            type: string
          account_id:
            type: string
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::<< parameters.account_id >>:role/opg-metrics-ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin << parameters.ecr >>

    jobs:
      terraform_command:
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
          configuration_path:
            description: Terraform configuration path
            type: string
          terraform_command:
            description: Terraform command to execute
            type: string
        environment:
          TF_WORKSPACE: "<<parameters.workspace>>"
          TF_CLI_ARGS_plan: "-lock-timeout=300s"
          TF_CLI_ARGS_apply: "-lock-timeout=300s -auto-approve"
        steps:
          - checkout
          - run:
              name: terraform <<parameters.terraform_command>> <<parameters.configuration_path>> <<parameters.workspace>>
              command: |
                terraform --version
                cd ~/project/terraform/<<parameters.configuration_path>>
                terraform init
                terraform <<parameters.terraform_command>> | ~/project/scripts/pipeline/redact_output.sh

      docker_build_lambda_image:
        executor: python
        parameters:
          lambda_name:
            type: string
        environment:
            ECR_URL: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/opg-metrics/<< parameters.lambda_name >>
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 20.10.7
              docker_layer_caching: false
          - run:
              name: Build
              command: |
                echo $ECR_URL
                docker build --file lambda/<< parameters.lambda_name >>/Dockerfile --tag ${ECR_URL}:latest .
          - ecr_login_lambda:
              ecr: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
              account_id: "311462405659"
          - run:
              name: Push container
              command: |
                export IMAGE_TAG=$(bash ~/project/scripts/pipeline/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                echo $IMAGE_TAG
                docker tag ${ECR_URL}:latest ${ECR_URL}:${IMAGE_TAG}
                if [ "${CIRCLE_BRANCH}" == "main" ]; then
                  # We want all of the tags pushed
                  docker push --all-tags ${ECR_URL}
                else
                  docker push ${ECR_URL}:${IMAGE_TAG}
                fi

      test_lambda:
        executor: python
        parameters:
          lambda_name:
            type: string
        steps:
          - checkout
          - install_pytest
          - run:
              name: Run Tests
              command: |
                cd ~/project/lambda/<<parameters.lambda_name>>/src
                pip install -r requirements_dev.txt
                pytest --junitxml=results/pytest/results.xml
          - store_test_results:
              path: ~/project/lambda/<<parameters.lambda_name>>/src/results/

      rotate_api_keys:
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
          configuration_path:
            description: Terraform configuration path
            type: string
        environment:
          TF_WORKSPACE: "<<parameters.workspace>>"
          TF_CLI_ARGS_plan: "-lock-timeout=300s"
          TF_CLI_ARGS_apply: "-lock-timeout=300s -auto-approve"
        steps:
          - checkout
          - run:
              name: terraform taint api keys
              command: |
                terraform --version
                cd ~/project/terraform/<<parameters.configuration_path>>
                terraform init
                all_aws_access_keys=$(terraform state list | grep aws_api_gateway_api_key | sed 's/*//g')
                for access_key in $all_aws_access_keys
                do
                  terraform taint $access_key
                done




jobs:
  cancel_redundant_builds:
    docker:
      - image: circleci/python
    resource_class: small
    steps:
      - checkout
      - run:
          name: Cancel Redundant Builds
          command: |
            python scripts/pipeline/cancel_previous_jobs/cancel_redundant_builds.py \
            --circle_project_username ${CIRCLE_PROJECT_USERNAME} \
            --circle_project_reponame ${CIRCLE_PROJECT_REPONAME} \
            --circle_branch ${CIRCLE_BRANCH} \
            --circle_builds_token ${CIRCLECI_API_KEY} \
            --terms_to_waitfor "plan_shared_terraform,apply_environment_terraform"
